from django.core.management.base import BaseCommand
from courses_database.models import CourseData, Country
import pandas as pd

def switch_keys_and_values(dictionary):
    switched_dict = {value: key for key, value in dictionary.items()}
    return switched_dict

worldMapCodes = {
    'AF': "Afghanistan",
    'AX': "Aland Islands",
    'AL': "Albania",
    'DZ': "Algeria",
    'AS': "American Samoa",
    'AD': "Andorra",
    'AO': "Angola",
    'AI': "Anguilla",
    'AQ': "Antarctica",
    'AG': "Antigua and Barbuda",
    'AR': "Argentina",
    'AM': "Armenia",
    'AW': "Aruba",
    'AU': "Australia",
    'AT': "Austria",
    'AZ': "Azerbaijan",
    'BS': "Bahamas",
    'BH': "Bahrain",
    'BD': "Bangladesh",
    'BB': "Barbados",
    'BY': "Belarus",
    'BE': "Belgium",
    'BZ': "Belize",
    'BJ': "Benin",
    'BM': "Bermuda",
    'BT': "Bhutan",
    'BO': "Bolivia",
    'BQ': "Bonaire, Sint Eustatius and Saba",
    'BA': "Bosnia and Herzegovina",
    'BW': "Botswana",
    'BV': "Bouvet Island",
    'BR': "Brazil",
    'IO': "British Indian Ocean Territory",
    'BN': "Brunei Darussalam",
    'BG': "Bulgaria",
    'BF': "Burkina Faso",
    'BI': "Burundi",
    'KH': "Cambodia",
    'CM': "Cameroon",
    'CA': "Canada",
    'CV': "Cape Verde",
    'KY': "Cayman Islands",
    'CF': "Central African Rep.",
    'TD': "Chad",
    'CL': "Chile",
    'CN': "China",
    'CX': "Christmas Island",
    'CC': "Cocos (Keeling) Islands",
    'CO': "Colombia",
    'KM': "Comoros",
    'CG': "Congo",
    'CD': "Dem. Rep. Congo",
    'CK': "Cook Islands",
    'CR': "Costa Rica",
    'CI': "C\u00f4te d'Ivoire",
    'HR': "Croatia",
    'CU': "Cuba",
    'CW': "Curacao",
    'CY': "Cyprus",
    'XC': "N. Cyprus",
    'CZ': "Czech Republic",
    'DK': "Denmark",
    'DJ': "Djibouti",
    'DM': "Dominica",
    'DO': "Dominican Republic",
    'EC': "Ecuador",
    'EG': "Egypt",
    'GB': "United Kingdom",
    'GQ': "Equatorial Guinea",
    'ER': "Eritrea",
    'EE': "Estonia",
    'ET': "Ethiopia",
    'FK': "Falkland Islands (Malvinas)",
    'FO': "Faroe Islands",
    'FJ': "Fiji",
    'FI': "Finland",
    'FR': "France",
    'GF': "French Guiana",
    'PF': "French Polynesia",
    'TF': "Fr. S. Antarctic Lands",
    'GA': "Gabon",
    'GM': "Gambia",
    'GE': "Georgia",
    'DE': "Germany",
    'GH': "Ghana",
    'GI': "Gibraltar",
    'GR': "Greece",
    'GL': "Greenland",
    'GD': "Grenada",
    'GP': "Guadeloupe",
    'GU': "Guam",
    'GT': "Guatemala",
    'GG': "Guernsey",
    'GN': "Guinea",
    'GW': "Guinea-Bissau",
    'GY': "Guyana",
    'HT': "Haiti",
    'HM': "Heard Island and Mcdonald Islands",
    'VA': "Holy See (Vatican City State)",
    'HN': "Honduras",
    'HK': "Hong Kong",
    'HU': "Hungary",
    'IS': "Iceland",
    'IN': "India",
    'ID': "Indonesia",
    'IR': "Iran",
    'IQ': "Iraq",
    'IE': "Ireland",
    'IM': "Isle of Man",
    'IL': "Israel",
    'IT': "Italy",
    'JM': "Jamaica",
    'JP': "Japan",
    'JE': "Jersey",
    'JO': "Jordan",
    'KZ': "Kazakhstan",
    'KE': "Kenya",
    'KI': "Kiribati",
    'KP': "Korea, Democratic People's Republic of",
    'KR': "Korea, Republic of",
    'KW': "Kuwait",
    'KG': "Kyrgyzstan",
    'XK': "Kosovo",
    'LA': "Laos",
    'LV': "Latvia",
    'LB': "Lebanon",
    'LS': "Lesotho",
    'LR': "Liberia",
    'LY': "Libya",
    'LI': "Liechtenstein",
    'LT': "Lithuania",
    'LU': "Luxembourg",
    'MK': "Macedonia",
    'MG': "Madagascar",
    'MW': "Malawi",
    'MY': "Malaysia",
    'MV': "Maldives",
    'ML': "Mali",
    'MT': "Malta",
    'MH': "Marshall Islands",
    'MQ': "Martinique",
    'MR': "Mauritania",
    'MU': "Mauritius",
    'YT': "Mayotte",
    'MX': "Mexico",
    'FM': "Micronesia, Federated States of",
    'MD': "Moldova, Republic of",
    'MC': "Monaco",
    'MN': "Mongolia",
    'ME': "Montenegro",
    'MS': "Montserrat",
    'MA': "Morocco",
    'MZ': "Mozambique",
    'MM': "Myanmar",
    'NA': "Namibia",
    'NE': "Niger",
    'NG': "Nigeria",
    'NI': "Nicaragua",
    'NL': "Netherlands",
    'NO': "Norway",
    'NP': "Nepal",
    'NR': "Nauru",
    'NU': "Niue",
    'NZ': "New Zealand",
    'OM': "Oman",
    'PA': "Panama",
    'PE': "Peru",
    'PG': "Papua New Guinea",
    'PH': "Philippines",
    'PK': "Pakistan",
    'PS': "Palestine",
    'PL': "Poland",
    'PT': "Portugal",
    'PW': "Palau",
    'PY': "Paraguay",
    'QA': "Qatar",
    'RO': "Romania",
    'RS': "Serbia",
    'RU': "Russia",
    'RW': "Rwanda",
    'SA': "Saudi Arabia",
    'SB': "Solomon Islands",
    'SC': "Seychelles",
    'ES': "Spain",
    'SD': "Sudan",
    'SE': "Sweden",
    'CH': "Switzerland",
    'SG': "Singapore",
    'SI': "Slovenia",
    'SK': "Slovakia",
    'SL': "Sierra Leone",
    'SM': "San Marino",
    'SN': "Senegal",
    'SO': "Somalia",
    'XS': "Somaliland",
    'SR': "Suriname",
    'SS': "South Sudan",
    'ST': "Sao Tome and Principe",
    'SV': "El Salvador",
    'SY': "Syria",
    'SZ': "Swaziland",
    'LK': "Sri Lanka",
    'TD': "Chad",
    'TG': "Togo",
    'TH': "Thailand",
    'TJ': "Tajikistan",
    'TL': "East Timor",
    'TM': "Turkmenistan",
    'TN': "Tunisia",
    'TO': "Tonga",
    'TR': "Turkey",
    'TT': "Trinidad and Tobago",
    'TV': "Tuvalu",
    'TW': "Taiwan",
    'TZ': "Tanzania",
    'UA': "Ukraine",
    'UG': "Uganda",
    'US': "United States",
    'AE': "United Arab Emirates",
    'UY': "Uruguay",
    'UZ': "Uzbekistan",
    'VA': "Vatican City",
    'VC': "Saint Vincent and the Grenadines",
    'VE': "Venezuela",
    'VN': "Vietnam",
    'VU': "Vanuatu",
    'EH': "W. Sahara",
    'WS': "Samoa",
    'YE': "Yemen",
    'ZA': "South Africa",
    'ZM': "Zambia",
    'ZW': "Zimbabwe",
}

mapcodes = switch_keys_and_values(worldMapCodes)


class Command(BaseCommand):
    help = 'Populate CourseData model with data from Excel file'

    def handle(self, *args, **options):
        excel_file_path = 'static/mhadri_database.xlsx' 
        df = pd.read_excel(excel_file_path)

        for _, row in df.iterrows():
            institution_location_name = row['Institution Location']
            country_code = mapcodes.get(institution_location_name, None)

            if country_code is not None:
                country, created = Country.objects.get_or_create(country_name=institution_location_name, country_code=country_code)
            else:
                country, created = Country.objects.get_or_create(country_name=institution_location_name)

            CourseData.objects.create(
                source=row['Source'],
                institution_name=row['Institution'],
                institution_location=country,
                type_of_course=row['Type of course'],
                thematic_focus=row['Thematic focus'],
                target_population=row['Target population( group that the studies focuses on, ie Migrants)'],
                scope=row['Scope'],
                objective_of_training=row['Objectives of training'],
                target_audience=row['Target audience'],
                traings_faculty=row['Trainings/Faculty (including qualifications)'],
                teaching_mechanism=row['Teaching Mechanism(online or face to face)'],
                teaching_approach=row['Teaching approach'],
                frequency_of_training=row['Frequency of Training'],
                funding_schemes=row['Funding Schemes'],
                sustainibility_factors=row['Sustainabiity Factors'],
                key_challenges=row['Key Challenges']
            )

        self.stdout.write(self.style.SUCCESS('Data populated successfully'))
